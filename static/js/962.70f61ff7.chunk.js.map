{"version":3,"file":"static/js/962.70f61ff7.chunk.js","mappings":"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","sources":["redux/filter/selectors.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["export const selectFilters = state => state.filter.filter;\n","export const selectContacts = state => state.phonebook.contacts;\nexport const selectIsLoading = state => state.phonebook.isLoading;\nexport const selectError = state => state.phonebook.error;\n","import styled from 'styled-components';\nimport { Form, ErrorMessage, Field } from 'formik';\n\nexport const StyledForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  row-gap: 20px;\n  max-width: 250px;\n  margin-bottom: 50px;\n  font-weight: 500;\n`;\n\nexport const StyledLabel = styled.div`\n  display: flex;\n  flex-direction: column;\n  row-gap: 5px;\n`;\n\nexport const StyledButton = styled.button`\n  width: 115px;\n  background-color: transparent;\n  border: 0.1px solid lightgray;\n  border-radius: 3px;\n  box-shadow: 1px 1px 2px 0px lightgray;\n\n  &:active {\n    background-color: blue;\n  }\n`;\n\nexport const StyledField = styled(Field)`\n  border: 0.1px solid lightgray;\n\n  &:focus {\n    outline: none;\n    box-shadow: 0px 0px 3px 2px lightblue;\n  }\n`;\n\nexport const StyledErrorMessage = styled(ErrorMessage)`\n  color: red;\n`;\n","import { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport {\n  StyledForm,\n  StyledLabel,\n  StyledButton,\n  StyledField,\n  StyledErrorMessage,\n} from './ContactForm.styled';\nimport { addContact } from 'redux/contacts/operations';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nconst phonebookSchema = Yup.object().shape({\n  name: Yup.string().required('This field is required!'),\n  number: Yup.string()\n    .matches(/^[0-9-+]+$/, 'Please enter digits, \"-\" or \"+\"')\n    .required('This field is required!'),\n});\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, actions) => {\n    if (\n      contacts.some(\n        contact => contact.name.toLowerCase() === values.name.toLowerCase()\n      )\n    ) {\n      return alert(`${values.name} is already in contacts!`);\n    }\n    dispatch(addContact(values));\n    actions.resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{ name: '', number: '' }}\n      validationSchema={phonebookSchema}\n      onSubmit={handleSubmit}\n    >\n      <StyledForm>\n        <StyledLabel>\n          Name\n          <StyledField name=\"name\" />\n          <StyledErrorMessage name=\"name\" component=\"div\" />\n        </StyledLabel>\n        <StyledLabel>\n          Number\n          <StyledField name=\"number\" />\n          <StyledErrorMessage name=\"number\" component=\"div\" />\n        </StyledLabel>\n        <StyledButton type=\"submit\">Add contact</StyledButton>\n      </StyledForm>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const StyledList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  row-gap: 15px;\n`;\n\nexport const StyledButton = styled.button`\n  width: auto;\n  margin-left: 10px;\n  background-color: transparent;\n  border: 0.1px solid lightgray;\n  border-radius: 3px;\n  box-shadow: 1px 1px 2px 0px lightgray;\n\n  &:active {\n    background-color: blue;\n  }\n`;\n","import { nanoid } from 'nanoid';\nimport { StyledList, StyledButton } from './ContactList.styled';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\n\nexport const ContactList = ({ items }) => {\n  const dispatch = useDispatch();\n  return (\n    <StyledList>\n      {items.map(item => {\n        return (\n          <li key={nanoid()}>\n            {item.name}: {item.number}{' '}\n            <StyledButton\n              type=\"button\"\n              onClick={() => {\n                dispatch(deleteContact(item.id));\n              }}\n            >\n              Delete\n            </StyledButton>\n          </li>\n        );\n      })}\n    </StyledList>\n  );\n};\n","import styled from 'styled-components';\n\nexport const StyledFilter = styled.input`\n  border: 0.1px solid lightgray;\n  &:focus {\n    outline: none;\n    box-shadow: 0px 0px 3px 2px lightblue;\n  }\n`;\n\nexport const StyledTitle = styled.p`\n  margin-bottom: 5px;\n`;\n","import { useDispatch } from 'react-redux';\nimport { StyledFilter } from './Filter.styled';\nimport { changeFilter } from 'redux/filter/slice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const handlerChange = e => {\n    dispatch(changeFilter(e.target.value));\n  };\n  return <StyledFilter type=\"string\" name=\"filter\" onChange={handlerChange} />;\n};\n","import { selectFilters } from 'redux/filter/selectors';\nimport {\n  selectContacts,\n  selectIsLoading,\n  selectError,\n} from 'redux/contacts/selectors';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { StyledTitle } from 'components/Filter/Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { Helmet } from 'react-helmet';\n\nconst Contacts = () => {\n  const filter = useSelector(selectFilters);\n  const contacts = useSelector(selectContacts);\n\n  const filteredContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <Helmet>\n        <title>Contacts</title>\n      </Helmet>\n\n      <h2>Phonebook</h2>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      {error && (\n        <div>\n          <b>Error! Please reload the page or try later!</b>\n        </div>\n      )}\n      {isLoading && (\n        <div>\n          <b>Loading...</b>\n        </div>\n      )}\n      {filteredContacts.length ? (\n        <>\n          <StyledTitle>Find contacts by name</StyledTitle>\n          <ContactList items={filteredContacts} />\n        </>\n      ) : (\n        <StyledTitle>There are no contacts yet!</StyledTitle>\n      )}\n    </div>\n  );\n};\n\nexport default Contacts;\n"],"names":["selectFilters","state","filter","selectContacts","phonebook","contacts","selectIsLoading","isLoading","selectError","error","StyledForm","styled","Form","_templateObject","_taggedTemplateLiteral","StyledLabel","_templateObject2","StyledButton","_templateObject3","StyledField","Field","_templateObject4","StyledErrorMessage","ErrorMessage","_templateObject5","phonebookSchema","Yup","shape","name","required","number","matches","ContactForm","useSelector","dispatch","useDispatch","_jsx","Formik","initialValues","validationSchema","onSubmit","values","actions","some","contact","toLowerCase","alert","concat","addContact","resetForm","children","_jsxs","component","type","StyledList","ContactList","_ref","items","map","item","onClick","deleteContact","id","nanoid","StyledFilter","StyledTitle","Filter","onChange","e","changeFilter","target","value","filteredContacts","includes","useEffect","fetchContacts","Helmet","length","_Fragment"],"sourceRoot":""}